question link: https://practice.geeksforgeeks.org/problems/find-missing-and-repeating2512/1


#include<bits/stdc++.h>
using namespace std;

class Solution{
public:
    int *findDoublipcateElement(int *arr,int n)
    {
        int a,b;
        for(int i=0;i<n;i++)
        {
            if(arr[abs(arr[i])-1]<0)   // get the value as a index then keep it in that array 
            {
               a = abs(arr[i]);
            }
            else
            {
                arr[abs(arr[i])-1]= - arr[abs(arr[i])-1];
            }
        }
        for(int i=0;i<n;i++)
        {
            if(arr[i]>0)
            {
                b= i+1;
                break;
            }
        }
        int *newArray= new int[2];
        newArray[0]=a;
        newArray[1]=b;

        return newArray;


    }
};

int main()
{
    int t;
    cin>>t;
    while(t--)
    {
        int n;
        cin>>n;
        int ar[n];
        for(int i=0;i<n;i++)
        {
            cin>>ar[i];
        }
        Solution ob;
        auto ans = ob.findDoublipcateElement(ar,n);
        cout<<ans[0]<<" "<<ans[1]<<endl;
    }

}
